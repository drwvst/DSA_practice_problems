class Solution {
    public int longestConsecutive(int[] nums) {
        Map<Integer,Integer> map = new HashMap<>();

        int len = 0;
        for(int i : nums){
            map.put(i,0);
        }

        for (Integer key : new HashSet<>(map.keySet())){
            int valLen = maxLenFinder(map, key);
            if(valLen > len){
                len = valLen;
            }
        }
        if(nums.length == 0){
            return len;
        }
        return len;
    }

    public int maxLenFinder(Map<Integer,Integer> map, int val){ //occur will always be passed in as 0
        map.remove(val);  // Mark this number as visited
        int count = 1;

        if (map.containsKey(val + 1)) {
            count += maxLenFinder(map, val + 1);
        }
        if (map.containsKey(val - 1)) {
            count += maxLenFinder(map, val - 1);
        }

        return count;
    }
}